import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Queue;

public class Main {

    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> valueMap = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int a = target - nums[i];
            if (valueMap.containsKey(a)) {
                return new int[] {nums[valueMap.get(a)], nums[i]};
            } else {
                valueMap.put(nums[i], i);
            }
        }
        return null;
    }

    public static class ListNode {
        private int val;
        private ListNode next;
        private ListNode() {}
        private ListNode(int val) {
            this.val = val;
        }
        private ListNode(int val, ListNode node) {
            this.val = val;
            this.next = node;
        }
        public String toString() {
            StringBuilder a = new StringBuilder();
            ListNode current = this;
            while (current != null) {
                a.append(current.val);
                if (current.next != null) {
                    a.append(" -> ");
                }
                current = current.next;
            }
            return a.toString();
        }
    }

    public ListNode add(ListNode l1, ListNode l2) {
        ListNode a = new ListNode(-1);
        ListNode b = a;
        int carry = 0;
        while (l1 != null && l2 != null || carry != 0) {
            int value = 0;
            if (l1 != null) {
                value += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                value += l2.val;
                l2 = l2.next;
            }
            if (carry != 0) {
                value += carry;
            }
            carry = value / 10;
            int mod = value % 10;
            b.next = new ListNode(mod);
            b = b.next;
        }
        return a.next;
    }

    // 合并两个数组
    public int[][] merge(int[][] intervals) {
        // 原始数据排序
        Arrays.sort(intervals, (a, b)->a[0] - b[0]);
        List<int[]> merged = new ArrayList<>();
        for (int[] interval : intervals) {
            if (merged.isEmpty() || merged.get(merged.size() - 1)[1] < interval[0]) {
                merged.add(interval);
            } else {
                merged.get(merged.size() - 1)[1] = Math.max(merged.get(merged.size() - 1)[1],
                                                   interval[1]);
            }
        }

        return merged.toArray(new int[merged.size()][]);
    }

    public static class TreeNode {
        private int val;
        private TreeNode left;
        private TreeNode right;
        public TreeNode(int val) {
            this.val = val;
        }
        public String toString() {
            StringBuilder sb = new StringBuilder();
            Queue<TreeNode> queue = new LinkedList<>();
            queue.offer(this);
            while (!queue.isEmpty()) {
                TreeNode node = queue.poll();
                if (node == null) {
                    sb.append("null");
                } else {
                    sb.append(node.val);
                    queue.offer(node.left);
                    queue.offer(node.right);
                }
                if (!queue.isEmpty()) {
                    sb.append(", ");
                }
            }
            return sb.toString();
        }
    }

    public TreeNode buildTree(int[] preOrder, int[] inOrder) {
        int preLength = preOrder.length;
        int inLength = inOrder.length;
        if (preLength != inLength) {
            return null;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < inLength; i++) {
            map.put(inOrder[i], i);
        }
        return buildTree(preOrder, map, 0, preLength - 1, 0, inLength - 1);
    }
    public TreeNode buildTree(int[] preOder, Map<Integer, Integer> map, int preLeft,
                              int preRight, int inLeft, int inRight) {
        if (preLeft > preRight || inLeft > inRight) {
            return null;
        }
        int rootEle = preOder[preLeft];
        TreeNode root = new TreeNode(rootEle);
        int pIndex = map.get(rootEle);
        root.left = buildTree(preOder, map, preLeft + 1, pIndex + preLeft - inLeft,
                              inLeft, pIndex - 1);
        root.right = buildTree(preOder, map, pIndex + preLeft - inLeft + 1, preRight,
                               pIndex + 1, inRight);
        return root;
    }

    // 反转链表区间
    public ListNode reverseNode(ListNode head, int left, int right){
        ListNode dummmyNode = new ListNode(-1);
        dummmyNode.next = head;
        ListNode pre = dummmyNode;
        for(int i = 0; i<left-1; i++){
            pre = pre.next;
        }
        ListNode cur = pre.next;
        ListNode next;
        for(int i = 0; i< right-left; i++){
            next = cur.next;
            cur.next = next.next;
            next.next = pre.next;
            pre.next = next;
        }
        return dummmyNode.next;
    }

    public static void main(String[] args) {
        // 两数之和
        int[] nums = new int[] {1, 2, 3};
        int target = 3;
        System.out.println(Arrays.toString(new Main().twoSum(nums, target)));
        
        // 链表相加
        ListNode s1 = new ListNode(3);
        s1.next = new ListNode(4);
        s1.next.next = new ListNode(5);
        ListNode s2 = new ListNode(3);
        s2.next = new ListNode(6);
        s2.next.next = new ListNode(5);
        System.out.println(new Main().add(s1, s2));
        // 链表反转
        System.out.println(new Main().reverseNode(s1, 2,3));

        // 根据遍历结果生成二叉树
        int[] preOrder = {3, 9, 20, 15, 7};
        int[] inOrder = {9, 3, 15, 20, 7};
        System.out.println(new Main().buildTree(preOrder, inOrder));

        // 两数合并
        int[][] intervals = {{1, 3}, {4, 10}, {8, 10}, {15, 18}};
        int[][] result = new Main().merge(intervals);
        for (int[] interval : result) {
            System.out.println(Arrays.toString(interval));
        }
    }
}