
介绍
这是我去年7，8月份面58被问的一个面试题，说实话被问到这个问题还是很意外的，感觉这个东西没啥用啊，直到后面被问了一波new Object，Integer对象等作为加锁对象行吗？会出现哪些问题？为啥java6后synchronized性能大幅上升？我彻底蒙蔽了。下面详细总结一下
synchronized使用方式
我们知道并发编程会产生各种问题的源头是可见性，原子性，有序性。
而synchronized能同时保证可见性，原子性，有序性。所以我们在解决并发问题的时候经常用synchronized，当然还有很多其他工具，如volatile。但是volatile只能保证可见性，原子性，不能保证有序性，参见我之前的文章
从计算机的角度理解volatile关键字
synchronized可以用在如下地方
修饰实例方法，对当前实例对象this加锁
修饰静态方法，对当前类的Class对象加锁
修饰代码块，指定加锁对象，对给定对象加锁
修饰实例方法
publicclassSynchronizedDemo{    publicsynchronizedvoidmethodOne(){    }}
修饰静态方法
publicclassSynchronizedDemo{    publicstaticsynchronizedvoidmethodTwo(){    }}
修饰代码块
publicclassSynchronizedDemo{    publicvoidmethodThree(){        // 对当前实例对象this加锁synchronized (this) {        }    }    publicvoidmethodFour(){        // 对class对象加锁synchronized (SynchronizedDemo.class) {        }    }}
synchronized实现原理
Java对象组成
我们都知道对象是放在堆内存中的，对象大致可以分为三个部分，分别是对象头，实例变量和填充字节

对象头，主要包括两部分1. Mark Word (标记字段)，2.Klass Pointer(类型指针)。Klass Point 是对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。Mark Word用于存储对象自身的运行时数据
实例变量，存放类的属性数据信息，包括父类的属性信息，这部分内存按4字节对齐
填充数据，由于虚拟机要求对象起始地址必须是8字节的整数倍。填充数据不是必须存在的，仅仅是为了字节对齐
synchronized不论是修饰方法还是代码块，都是通过持有修饰对象的锁来实现同步，那么synchronized锁对象是存在哪里的呢？答案是存在锁对象的对象头Mark Word，来看一下Mark Word存储了哪些内容？
由于对象头的信息是与对象自身定义的数据没有关系的额外存储成本，因此考虑到JVM的空间效率，Mark Word 被设计成为一个非固定的数据结构，以便存储更多有效的数据，它会根据对象本身的状态复用自己的存储空间，也就是说，Mark Word会随着程序的运行发生变化，变化状态如下 (32位虚拟机)：

其中轻量级锁和偏向锁是Java 6 对 synchronized 锁进行优化后新增加的，稍后我们会简要分析。这里我们主要分析一下重量级锁也就是通常说synchronized的对象锁，锁标识位为10，其中指针指向的是monitor对象（也称为管程或监视器锁）的起始地址。每个对象都存在着一个 monitor 与之关联。在Java虚拟机(HotSpot)中，monitor是由ObjectMonitor实现的，其主要数据结构如下（位于HotSpot虚拟机源码ObjectMonitor.hpp文件，C++实现的），省略部分属性
ObjectMonitor() {    _count        = 0; //记录数    _recursions   = 0; //锁的重入次数    _owner        = NULL; //指向持有ObjectMonitor对象的线程     _WaitSet      = NULL; //调用wait后，线程会被加入到_WaitSet    _EntryList    = NULL ; //等待获取锁的线程，会被加入到该列表}

结合线程状态解释一下执行过程。(状态装换参考自《深入理解Java虚拟机》)
新建（New），新建后尚未启动的线程
运行（Runable），Runnable包括了操作系统线程状态中的Running和Ready
无限期等待（Waiting），不会被分配CPU执行时间，要等待被其他线程显式的唤醒。例如调用没有设置Timeout参数的Object.wait()方法
限期等待（Timed Waiting），不会被分配CPU执行时间，不过无需等待其他线程显示的唤醒，在一定时间之后会由系统自动唤醒。例如调用Thread.sleep()方法
阻塞（Blocked），线程被阻塞了，“阻塞状态”与“等待状态”的区别是：“阻塞状态”在等待获取着一个排他锁，这个事件将在另外一个线程放弃这个锁的时候发生，而“等待状态”则是在等待一段时间，或者唤醒动作的发生。在程序等待进入同步区域的时候，线程将进入这种状态
结束（Terminated）：线程结束执行

对于一个synchronized修饰的方法(代码块)来说：
当多个线程同时访问该方法，那么这些线程会先被 放进_EntryList队列 ，此时线程处于blocked状态
当一个线程获取到了对象的monitor后，那么就可以进入running状态，执行方法，此时，ObjectMonitor对象的 _owner指向当前线程，_count加1 表示当前对象锁被一个线程获取
当running状态的线程调用wait()方法，那么当前线程释放monitor对象，进入waiting状态，ObjectMonitor对象的 _owner变为null，_count减1 ，同时线程进入_WaitSet队列，直到有线程调用notify()方法唤醒该线程， 则该线程进入_EntryList队列，竞争到锁再进入_Owner区
如果当前线程执行完毕，那么也释放monitor对象，ObjectMonitor对象的 _owner变为null，_count减1
由此看来，monitor对象存在于每个Java对象的对象头中(存储的是指针)，synchronized锁便是通过这种方式获取锁的，也是 为什么Java中任意对象可以作为锁的原因，同时也是notify/notifyAll/wait等方法存在于顶级对象Object中的原因
synchronized如何获取monitor对象？
那么synchronized是通过什么方式来获取monitor对象的？
synchronized修饰代码块
publicclassSyncCodeBlock{    publicint count = 0;    publicvoidaddOne(){        synchronized (this) {            count++;        }    }}
javacSyncCodeBlock.javajavap-vSyncCodeBlock.class
反编译的字节码如下
publicvoidaddOne();    descriptor: ()V    flags: ACC_PUBLIC    Code:      stack=3, locals=3, args_size=10: aload_0         1: dup         2: astore_1         3: monitorenter // 进入同步方法4: aload_0         5: dup         6: getfield      #2// Field count:I9: iconst_1        10: iadd        11: putfield      #2// Field count:I14: aload_1        15: monitorexit // 退出同步方法16: goto2419: astore_2        20: aload_1        21: monitorexit // 退出同步方法22: aload_2        23: athrow        24: return      Exception table:
可以看到进入同步代码块，执行monitorenter指令，退出同步代码块，执行monitorexit指令，可以看到有2个monitorexit指令，第一个是正常退出执行的，第二个是当异常发生时执行的
synchronized修饰方法
publicclassSyncMethod{    publicint count = 0;    publicsynchronizedvoidaddOne(){        count++;    }}
反编译的字节码如下
public synchronized voidaddOne();    descriptor: ()V    // 方法标识ACC_PUBLIC代表public修饰，ACC_SYNCHRONIZED指明该方法为同步方法    flags: ACC_PUBLIC, ACC_SYNCHRONIZED    Code:      stack=3, locals=1, args_size=10: aload_0         1: dup         2: getfield      #2// Field count:I5: iconst_1         6: iadd         7: putfield      #2// Field count:I10: return      LineNumberTable:
我们并没有看到monitorenter和monitorexit指令，那是怎么来实现同步的呢？
可以看到方法被标识为ACC_SYNCHRONIZED，表明这是一个同步方法
锁的升级
在Java早期版本中，synchronized属于重量级锁，效率低下，因为操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高。庆幸的是在Java 6之后Java官方对从JVM层面对synchronized较大优化，所以现在的synchronized锁效率也优化得很不错了，Java 6之后，为了减少获得锁和释放锁所带来的性能消耗，引入了偏向锁和轻量级锁，简单介绍一下
synchronized锁有四种状态，无锁，偏向锁，轻量级锁，重量级锁，这几个状态会随着竞争状态逐渐升级， 锁可以升级但不能降级，但是偏向锁状态可以被重置为无锁状态
偏向锁
为什么要引入偏向锁？
因为经过HotSpot的作者大量的研究发现，大多数时候是不存在锁竞争的，常常是一个线程多次获得同一个锁，因此如果每次都要竞争锁会增大很多没有必要付出的代价，为了降低获取锁的代价，才引入的偏向锁。
偏向锁原理和升级过程
当线程1访问代码块并获取锁对象时，会在java对象头和栈帧中记录偏向的锁的threadID，因为 偏向锁不会主动释放锁 ，因此以后线程1再次获取锁的时候，需要 比较当前线程的threadID和Java对象头中的threadID是否一致 ，如果一致（还是线程1获取锁对象），则无需使用CAS来加锁、解锁；如果不一致（其他线程，如线程2要竞争锁对象，而偏向锁不会主动释放因此还是存储的线程1的threadID），那么 需要查看Java对象头中记录的线程1是否存活 ，如果没有存活，那么锁对象被重置为无锁状态，其它线程（线程2）可以竞争将其设置为偏向锁；如果存活，那么立刻 查找该线程（线程1）的栈帧信息，如果还是需要继续持有这个锁对象 ，那么暂停当前线程1，撤销偏向锁，升级为轻量级锁，如果线程1 不再使用该锁对象，那么将锁对象状态设为无锁状态，重新偏向新的线程。
轻量级锁
为什么要引入轻量级锁？
轻量级锁考虑的是竞争锁对象的线程不多，而且线程持有锁的时间也不长的情景。因为阻塞线程需要CPU从用户态转到内核态，代价较大，如果刚刚阻塞不久这个锁就被释放了，那这个代价就有点得不偿失了，因此这个时候就干脆不阻塞这个线程，让它自旋这等待锁释放。
轻量级锁原理和升级过程
线程1获取轻量级锁时会先 把锁对象的对象头MarkWord复制一份到线程1的栈帧中创建的用于存储锁记录的空间 （称为DisplacedMarkWord），然后使 用CAS把对象头中的内容替换为线程1存储的锁记录（DisplacedMarkWord）的地址；
如果在线程1复制对象头的同时（在线程1CAS之前），线程2也准备获取锁，复制了对象头到线程2的锁记录空间中，但是在线程2CAS的时候，发现线程1已经把对象头换了， 线程2的CAS失败，那么线程2就尝试使用自旋锁来等待线程1释放锁。 自旋锁简单来说就是让线程2在循环中不断CAS
但是如果自旋的时间太长也不行，因为自旋是要消耗CPU的，因此自旋的次数是有限制的，比如10次或者100次， 如果自旋次数到了线程1还没有释放锁，或者线程1还在执行，线程2还在自旋等待，这时又有一个线程3过来竞争这个锁对象，那么这个时候轻量级锁就会膨胀为重量级锁。重量级锁把除了拥有锁的线程都阻塞，防止CPU空转。
几种锁的优缺点

用锁的最佳实践
错误的加锁姿势1
synchronized (new Object())
每次调用创建的是不同的锁，相当于无锁
错误的加锁姿势2
private Integer count;synchronized (count)
Integer，Boolean在实现了都用了享元模式，即值在一定范围内，对象是同一个。所以看似是用了不同的对象，其实用的是同一个对象。会导致一个锁被多个地方使用
Java常量池详解，秒懂各种对象相等操作
正确的加锁姿势
// 普通对象锁private finalObject lock = newObject();// 静态对象锁private staticfinalObject lock = newObject();
Lock接口的使用
既然有了synchronized，为啥还要提供Lock接口呢？也许你会说Lock接口比synchronized性能高。在jdk1.5之前确实如此，但是在jdk1.6之后，两者性能差不多了。直接来看Lock接口的定义，看看比synchronized多了哪些功能？
publicinterfaceLock{    // 加锁voidlock();    // 能够响应中断voidlockInterruptibly()throws InterruptedException;    // 非阻塞获取锁booleantryLock();    // 非阻塞超时获取锁booleantryLock(long time, TimeUnit unit)throws InterruptedException;    // 解锁voidunlock();    // 定义阻塞条件Condition newCondition();}
可以看到Lock接口相比synchronized多了很多特性，详细解释一下方法
lock()方法，用来获取锁，如果锁被其他线程获得则进行等待，需要和unlock方法配合主动释放锁。发生异常时，不会主动释放锁，所以释放锁的操作放在finally块中
lockInterruptibly()方法，当通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。也就使说，当两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有在等待，那么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程
tryLock()方法，用来尝试获取锁，如果获取成功，则返回true。如果获取失败则返回false。也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待
tryLock(long time, TimeUnit unit)方法，和tryLock()类似。只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果一开始拿到锁或者在等待期间内拿到了锁，则返回true
unlock()方法，解锁
newCondition()方法，定义条件
其余的应该都很好理解，演示一下lockInterruptibly()和newCondition()方法
lockInterruptibly()方法
ReentrantLock myLock = new ReentrantLock();// 先获取一次锁，让后续获取锁的操作阻塞myLock.lock();Thread thread = new Thread(() -> {    try {        // myLock.lock();        myLock.lockInterruptibly();    } catch (Exception e) {        e.printStackTrace();    } finally {        // 当使用myLock.lockInterruptibly()时// 会抛出java.lang.InterruptedException，打印over// 使用myLock.lock()，一直阻塞获取锁，不会打印over        System.out.println("over");    }});thread.start();TimeUnit.SECONDS.sleep(1);thread.interrupt();TimeUnit.SECONDS.sleep(100);
Condition的使用
synchronized与wait()和nitofy()/notifyAll()方法相结合可以实现等待/通知模型，ReentrantLock同样可以，但是需要借助Condition，且Condition有更好的灵活性，具体体现在
一个Lock里面可以创建多个Condition实例，实现多路通知
notify()方法进行通知时，被通知的线程时Java虚拟机随机选择的，但是ReentrantLock结合Condition可以实现有选择性地通知
publicclassWaitNotify {    static ReentrantLock lock = new ReentrantLock();    static Condition conditionA  = lock.newCondition();    static Condition conditionB = lock.newCondition();    publicstaticvoidmain(String[] args) throws InterruptedException {        Thread waitThreadA = new Thread(new WaitA(), "WaitThreadA");        waitThreadA.start();        Thread waitThreadB = new Thread(new WaitB(), "WaitThreadB");        waitThreadB.start();        TimeUnit.SECONDS.sleep(2);        lock.lock();        try {            conditionA.signal();        } finally {            lock.unlock();        }    }    staticclassWaitAimplementsRunnable {        @Override        publicvoidrun() {            lock.lock();            try {                System.out.println(Thread.currentThread() + " begin await @ "                        + new SimpleDateFormat("HH:mm:ss").format(new Date()));                conditionA.await();                System.out.println(Thread.currentThread() + " end await @ "                        + new SimpleDateFormat("HH:mm:ss").format(new Date()));            } catch (InterruptedException e) {                e.printStackTrace();            } finally {                lock.unlock();            }        }    }    staticclassWaitBimplementsRunnable {        @Override        publicvoidrun() {            lock.lock();            try {                System.out.println(Thread.currentThread() + " begin await @ "                        + new SimpleDateFormat("HH:mm:ss").format(new Date()));                conditionB.await();                System.out.println(Thread.currentThread() + " end await @ "                        + new SimpleDateFormat("HH:mm:ss").format(new Date()));            } catch (InterruptedException e) {                e.printStackTrace();            } finally {                lock.unlock();            }        }    }}
Thread[WaitThreadA,5,main]beginawait @ 00:49:57Thread[WaitThreadB,5,main]beginawait @ 00:49:57Thread[WaitThreadA,5,main]endawait @ 00:49:59
WaitThreadB因为没有被通知，一直阻塞
最后总结一波，synchronized和ReentrantLock的异同
ReentrantLock支持非阻塞的方式获取锁，能够响应中断，而synchronized不行
ReentrantLock必须手动获取和释放锁，而synchronized不需要
ReentrantLock可以是公平锁或者非公平锁，而synchronized只能是非公平锁
synchronized在发生异常的时候，会自动释放线程占有的锁，而ReentrantLock在发生异常时，如果没有通过unlock去释放锁，很有可能造成死锁，因此需要在finally块中释放锁
synchronized和ReentrantLock都是可重入锁

武汉加油 :heart:
原文始发于微信公众号（Java识堂）： 58面试官居然问我Synchronized底层实现，锁升级的具体过程？